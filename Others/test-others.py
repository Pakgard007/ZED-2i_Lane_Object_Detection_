import cv2
import numpy as np

# üìå ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
vidcap = cv2.VideoCapture("/home/satoi/final.mp4")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not vidcap.isOpened():
    print("Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ!")
    exit()

while True:
    success, image = vidcap.read()
    if not success:
        print("End of video.")
        break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ image ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô resize
    if image is None:
        print("Warning: ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        continue

    frame = cv2.resize(image, (640, 480))

    # ‚úÖ Perspective Transformation
    tl = (250, 300)  # Top-left (‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô)
    bl = (150, 450)  # Bottom-left (‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á)
    tr = (350, 300)  # Top-right (‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)  --> ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ y = 300 ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö TL
    br = (450, 450)  # Bottom-right (‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á)  --> ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ y = 450 ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö BL
    

    cv2.circle(frame, tl, 5, (0, 0, 255), -1)
    cv2.circle(frame, bl, 5, (0, 0, 255), -1)
    cv2.circle(frame, tr, 5, (0, 0, 255), -1)
    cv2.circle(frame, br, 5, (0, 0, 255), -1)

    # ‚úÖ Perspective Transformation - Geometrical transformation
    pts1 = np.float32([tl, bl, tr, br])
    pts2 = np.float32([[0, 0], [0, 480], [640, 0], [640, 480]])

    matrix = cv2.getPerspectiveTransform(pts1, pts2)
    transformed_frame = cv2.warpPerspective(frame, matrix, (640, 480))

    cv2.imshow("Frame", frame)
    cv2.imshow("Transformed_Frame", transformed_frame)

    # ‡∏Å‡∏î ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
    if cv2.waitKey(1) == 27:
        break

# ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
vidcap.release()
cv2.destroyAllWindows()
