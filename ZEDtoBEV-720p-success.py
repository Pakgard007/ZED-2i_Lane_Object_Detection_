import pyzed.sl as sl
import cv2
import numpy as np

# ----------------- 1. ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á ZED 2i -----------------
zed = sl.Camera()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
init_params = sl.InitParameters()
init_params.camera_resolution = sl.RESOLUTION.HD720  
init_params.camera_fps = 30
init_params.depth_mode = sl.DEPTH_MODE.NONE  

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
if zed.open(init_params) != sl.ERROR_CODE.SUCCESS:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ!")
    exit()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û
image = sl.Mat()

# ----------------- 2. ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå -----------------
calib_data = np.load("camera_calibration.npz")
mtxL = calib_data["camera_matrix_L"]
# distL = calib_data["dist_coeffs_L"]
distL = np.array([
    -0.07709319689152208,  # k1
     0.06756180189133752,  # k2
     0.00015006759935512075,  # p1 (tangential distortion)
    -6.006342505065124e-05,  # p2 (tangential distortion)
    -0.028545020615709165  # k3
])

extrinsic_data = np.load("extrinsic_parameters.npz")
R = extrinsic_data["R_left"]
T = extrinsic_data["T_left"]

print("‚úÖ Loaded Intrinsic and Extrinsic Parameters!")

# ----------------- 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Homography Matrix -----------------
n = np.array([[0, 0, 1]]).T  # ‡∏û‡∏∑‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡∏ô Z
d = 1.8  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏∂‡∏á‡∏û‡∏∑‡πâ‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Homography Matrix
H = mtxL @ (R - (T @ n.T) / d) @ np.linalg.inv(mtxL)
print("Updated Homography Matrix (H):\n", H)

# ----------------- 4. ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö BEV -----------------
src_pts = np.array([
    [300, 700],  # ‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô
    [1000, 700],  # ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô
    [550, 300],  # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    [750, 300]   # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
], dtype=np.float32)

dst_pts = np.array([
    [300, 850],  # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á BEV ‡∏Ç‡∏∂‡πâ‡∏ô
    [900, 850],  # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á BEV ‡∏Ç‡∏∂‡πâ‡∏ô
    [300, 400],  # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    [900, 400]   # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
], dtype=np.float32)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Homography Matrix ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î
H, _ = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC)

# ----------------- 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î -----------------
def draw_points(image, points, color, labels=True):
    """
    ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î

    Args:
        image: ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î
        points: ‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î
        color: ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î (BGR)
        labels: True ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î
    """
    for i, (x, y) in enumerate(points):
        cv2.circle(image, (int(x), int(y)), 8, color, -1)  # ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î
        if labels:
            cv2.putText(image, str(i+1), (int(x)+10, int(y)-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)

# ----------------- 6. ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô BEV -----------------
while True:
    if zed.grab() == sl.ERROR_CODE.SUCCESS:
        zed.retrieve_image(image, sl.VIEW.LEFT)
        frame = image.get_data()[:, :, :3]  
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)  

        # ‡πÅ‡∏Å‡πâ Distortion
        undistorted_frame = cv2.undistort(frame, mtxL, distL)

        # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î `src_pts` ‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (Front View)
        front_view = undistorted_frame.copy()
        draw_points(front_view, src_pts, (0, 0, 255))  # üî¥ ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏ô Front View

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Bird's Eye View
        bev_image = cv2.warpPerspective(undistorted_frame, H, (1800, 900))

        # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î `dst_pts` ‡∏ö‡∏ô‡∏†‡∏≤‡∏û BEV
        draw_points(bev_image, dst_pts, (255, 0, 0))  # üîµ ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô BEV

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        cv2.imshow("Front View - ZED 2i", front_view)
        cv2.imshow("Bird's Eye View", bev_image)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# ----------------- 7. ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á -----------------
zed.close()
cv2.destroyAllWindows()
