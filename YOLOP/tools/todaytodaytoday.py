import argparse
import os, sys
import time
import torch
import cv2
import numpy as np
import torchvision.transforms as transforms
import pyzed.sl as sl
import torch.nn.functional as F

# Import YOLOP utilities
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

from lib.config import cfg
from lib.models import get_net
from lib.core.general import non_max_suppression
from lib.utils import plot_one_box, show_seg_result
from lib.core.general import scale_coords


# Normalize for YOLOP
normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
transform = transforms.Compose([transforms.ToTensor(), normalize])

# ----------------- ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á ZED 2i -----------------
zed = sl.Camera()
init_params = sl.InitParameters()
init_params.camera_resolution = sl.RESOLUTION.HD720  
init_params.camera_fps = 60
init_params.depth_mode = sl.DEPTH_MODE.NONE  

if zed.open(init_params) != sl.ERROR_CODE.SUCCESS:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ!")
    exit()

image = sl.Mat()

# ----------------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå -----------------
calib_data = np.load("camera_calibration.npz")
mtxL = calib_data["camera_matrix_L"]
distL = np.array([
    -0.07709319689152208,  # k1
     0.06756180189133752,  # k2
     0.00015006759935512075,  # p1 (tangential distortion)
    -6.006342505065124e-05,  # p2 (tangential distortion)
    -0.028545020615709165  # k3
])

extrinsic_data = np.load("extrinsic_parameters.npz")
R = extrinsic_data["R_left"]
T = extrinsic_data["T_left"]

# ----------------- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Homography Matrix -----------------
src_pts = np.array([
    [300, 700], [1000, 700], [550, 300], [750, 300]   
], dtype=np.float32)

dst_pts = np.array([
    [300, 850], [900, 850], [300, 400], [900, 400]   
], dtype=np.float32)

H, _ = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC)

#-------------------Create ROI----------------------
def create_roi(image, roi_width_pixels=300, roi_height_pixels=700):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á ROI ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ú‡∏∑‡∏ô‡∏ú‡πâ‡∏≤‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    roi_width_pixels: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á ROI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    roi_height_pixels: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á ROI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    """
    height, width = image.shape[:2]

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á ROI
    x_start = (width - roi_width_pixels) // 2
    y_start = (height - roi_height_pixels) // 2

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á ROI
    roi = image[y_start:y_start + roi_height_pixels, x_start:x_start + roi_width_pixels]

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö ROI ‡πÉ‡∏ô‡∏†‡∏≤‡∏û Front View (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô BEV)
    cv2.rectangle(image, (x_start, y_start), (x_start + roi_width_pixels, y_start + roi_height_pixels), (0, 255, 0), 2)

    return roi, (x_start, y_start, roi_width_pixels, roi_height_pixels)

# ----------------- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOP -----------------
def load_yolop_model(weights_path, device):
    model = get_net(cfg)
    checkpoint = torch.load(weights_path, map_location=device)
    model.load_state_dict(checkpoint['state_dict'])
    model = model.to(device)
    model.eval()
    print(f"‚úÖ Model Loaded: {weights_path}")
    return model

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = load_yolop_model("/home/mag/satoi/python/YOLOP/weights/End-to-end.pth", device)

# ----------------- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Drivable Area ‡πÅ‡∏•‡∏∞ Lane -----------------
def detect_obstacles(image, model):
    input_image = transform(image).to(device)
    input_image = input_image.unsqueeze(0)

    with torch.no_grad():
        det_out, da_seg_out, ll_seg_out = model(input_image)

    _, _, height, width = input_image.shape
    da_seg_out = F.interpolate(da_seg_out, size=(height, width), mode='bilinear', align_corners=False)
    ll_seg_out = F.interpolate(ll_seg_out, size=(height, width), mode='bilinear', align_corners=False)

    da_seg_mask = torch.max(da_seg_out, 1)[1].squeeze().cpu().numpy()
    ll_seg_mask = torch.max(ll_seg_out, 1)[1].squeeze().cpu().numpy()

    # ‡πÉ‡∏ä‡πâ non_max_suppression ‡∏Å‡∏±‡∏ö det_out
    det_pred = non_max_suppression(det_out[0], conf_thres=0.25, iou_thres=0.45)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å non_max_suppression
    return da_seg_mask, ll_seg_mask, det_pred


# ----------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô ROI -----------------
def detect_objects_in_roi(roi, model):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô ROI ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô detect_obstacles ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    da_seg_mask, ll_seg_mask, det_pred = detect_obstacles(roi, model)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ det_pred ‡πÄ‡∏õ‡πá‡∏ô tensor ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if isinstance(det_pred, torch.Tensor):  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô tensor
        det_pred = det_pred.cpu().numpy()  # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà CPU ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array

    # ‡∏ã‡πâ‡∏≠‡∏ô Bounding Boxes ‡πÉ‡∏ô ROI
    roi_with_boxes = draw_bounding_boxes(roi, det_pred)

    return det_pred, roi_with_boxes

# ----------------- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà -----------------
def decision_making(object_detected):
    if object_detected:
        return "üö´ STOP: Obstacle Ahead!"  # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô ROI
    else:
        return "‚úÖ SAFE: Continue Moving"  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏


def draw_bounding_boxes(image, detections):
    if detections is not None and len(detections):
        for det in detections:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ det ‡πÄ‡∏õ‡πá‡∏ô numpy array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if isinstance(det, torch.Tensor):
                det = det.cpu().numpy()  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô tensor ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà CPU ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array

            det = np.array(det)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array
            det_tensor = torch.tensor(det[:, :4].astype(float), dtype=torch.float32)

            # ‡πÉ‡∏ä‡πâ scale_coords ‡∏Å‡∏±‡∏ö Tensor
            det_tensor = scale_coords(image.shape[:2], det_tensor, image.shape).round()

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô numpy.ndarray
            det[:, :4] = det_tensor.numpy().astype(int)

            for *xyxy, conf, cls in reversed(det):
                label = f'Obj {int(cls)} {conf:.2f}'
                plot_one_box(xyxy, image, label=label, color=(0, 0, 255), line_thickness=2)
    return image


# ----------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Overlay Drivable Area & Lane -----------------
def overlay_segmentation(image, mask, color=(0, 255, 0), alpha=0.4):
    overlay = np.zeros_like(image, dtype=np.uint8)
    overlay[mask > 0] = color
    blended = cv2.addWeighted(image, 1 - alpha, overlay, alpha, 0)
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
    blended = cv2.normalize(blended, None, 0, 255, cv2.NORM_MINMAX)
    
    return blended

# ----------------- ‡πÅ‡∏™‡∏î‡∏á ROI ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Front View -----------------
def show_roi_in_front_view(image, roi, roi_coords):
    x_start, y_start, roi_width, roi_height = roi_coords
    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏ô Front View
    cv2.rectangle(image, (x_start, y_start), (x_start + roi_width, y_start + roi_height), (0, 255, 0), 2)
    return image

def draw_distance_line(image, left_lane_x, distance_to_lane, pixels_per_meter):
    """ ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡πÉ‡∏ô Front View """
    car_x = 640  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô BEV (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô
    line_start = (car_x, image.shape[0])  # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ (‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
    line_end_x = int(car_x + (distance_to_lane * pixels_per_meter))
    line_end = (line_end_x, 0)  # ‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏∞‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô

    # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤
    color = (0, 255, 255)  # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
    thickness = 2
    
    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô
    cv2.line(image, line_start, line_end, color, thickness)
    return image

# ----------------- ‡πÅ‡∏õ‡∏•‡∏á Front View ‡πÄ‡∏õ‡πá‡∏ô BEV -----------------
def transform_to_bev(image, H):
    bev = cv2.warpPerspective(image, H, (1280, 720))
    return bev


def get_left_lane_position(ll_seg_mask):
    """ ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏≤‡∏û BEV """
    lane_pixels = np.where(ll_seg_mask > 0)  # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏ô
    if len(lane_pixels[0]) == 0:
        return None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None

    # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    lane_x = lane_pixels[1]  # ‡∏Ñ‡πà‡∏≤ x ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏•‡∏ô
    lane_y = lane_pixels[0]  # ‡∏Ñ‡πà‡∏≤ y ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏•‡∏ô
    center_x = ll_seg_mask.shape[1] // 2  # ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß x

    # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ center_x ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    left_lane_x = np.min(lane_x)  # ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á x ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    left_lane_y = lane_y[np.argmin(lane_x)]  # y ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ x ‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    return (left_lane_x, left_lane_y)

def compute_distance_to_lane(left_lane_x, pixels_per_meter):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ """
    car_x = 640  # ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û BEV (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ)
    pixel_distance = abs(car_x - left_lane_x)  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÑ‡∏õ‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    real_distance = pixel_distance / pixels_per_meter  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£
    return real_distance

def get_left_lane_position(ll_seg_mask):
    """ ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏≤‡∏û BEV """
    lane_pixels = np.where(ll_seg_mask > 0)  # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏ô
    if len(lane_pixels[0]) == 0:
        return None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None --------x

    # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    lane_x = lane_pixels[1]  # ‡∏Ñ‡πà‡∏≤ x ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏•‡∏ô
    lane_y = lane_pixels[0]  # ‡∏Ñ‡πà‡∏≤ y ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏•‡∏ô
    center_x = ll_seg_mask.shape[1] // 2  # ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß x

    # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ center_x ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    left_lane_x = np.min(lane_x)  # ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á x ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    left_lane_y = lane_y[np.argmin(lane_x)]  # y ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ x ‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    return (left_lane_x, left_lane_y)

def compute_distance_to_lane(left_lane_x, pixels_per_meter):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ """
    car_x = 640  # ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û BEV (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ)
    pixel_distance = abs(car_x - left_lane_x)  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÑ‡∏õ‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    real_distance = pixel_distance / pixels_per_meter  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£
    return real_distance

def track_drivable_area(da_seg_mask, prev_center=None):
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Drivable Area
    y, x = np.where(da_seg_mask > 0)
    
    if len(x) == 0 or len(y) == 0:  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ
        return None, prev_center
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
    center_x = np.mean(x)
    center_y = np.mean(y)
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤), ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    if prev_center is not None:
        movement_x = center_x - prev_center[0]
        movement_y = center_y - prev_center[1]
        movement = np.sqrt(movement_x**2 + movement_y**2)
        print(f"‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà: {movement:.2f} pixels")
    
    # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö (‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    return (center_x, center_y), (center_x, center_y)

# ----------------- ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á ZED 2i ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö -----------------
prev_center = None
while True:
    if zed.grab() == sl.ERROR_CODE.SUCCESS:
        zed.retrieve_image(image, sl.VIEW.LEFT)
        frame = image.get_data()[:, :, :3]  
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)  

        # ‡πÅ‡∏Å‡πâ Distortion
        undistorted_frame = cv2.undistort(frame, mtxL, distL)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Drivable Area ‡πÅ‡∏•‡∏∞ Lane
        da_seg_mask, ll_seg_mask, det_pred = detect_obstacles(undistorted_frame, model)
        
        # ‡πÅ‡∏ó‡∏£‡∏Ñ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Drivable Area
        center, prev_center = track_drivable_area(da_seg_mask, prev_center)

        if center is not None:
            # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Drivable Area
            cv2.circle(undistorted_frame, (int(center[0]), int(center[1])), 5, (0, 255, 0), -1)

        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        left_lane_pos = get_left_lane_position(ll_seg_mask)
        if left_lane_pos:
            left_lane_x, _ = left_lane_pos
            pixels_per_meter = 50  # ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏à‡∏£‡∏¥‡∏á
            distance_to_lane = compute_distance_to_lane(left_lane_x, pixels_per_meter)

            print(f" ---> ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: {distance_to_lane:.2f} ‡πÄ‡∏°‡∏ï‡∏£")

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏ñ
            if distance_to_lane > 1.0:
                print(" ---> ‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
                steering_command = -1  # ‡∏´‡∏°‡∏∏‡∏ô‡∏û‡∏ß‡∏á‡∏°‡∏≤‡∏•‡∏±‡∏¢‡∏ã‡πâ‡∏≤‡∏¢
            elif distance_to_lane < 1.0:
                print(" ---> ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏•‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏Ç‡∏¢‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
                steering_command = 1  # ‡∏´‡∏°‡∏∏‡∏ô‡∏û‡∏ß‡∏á‡∏°‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏ß‡∏≤
            else:
                print(" ---> ‚úÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏≠‡πÄ‡∏Ñ ‚Üí ‡∏ß‡∏¥‡πà‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ")
                steering_command = 0  # ‡∏ï‡∏£‡∏á‡πÑ‡∏õ

        # ----------------- Overlay Drivable Area & Lane ‡∏ö‡∏ô Front View -----------------
        overlay_da = overlay_segmentation(undistorted_frame.copy(), da_seg_mask, (0, 255, 0))  # ‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (Drivable Area)
        overlay_ll = overlay_segmentation(overlay_da, ll_seg_mask, (0, 0, 255))  # ‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á (Lane)

        # ----------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á BEV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ overlay_ll (‡πÑ‡∏°‡πà‡∏°‡∏µ ROI) -----------------
        bev_image = transform_to_bev(overlay_ll.copy(), H)  # ‡πÉ‡∏ä‡πâ overlay_ll ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ ROI

        # ----------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á ROI (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Front View ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) -----------------
        roi, roi_coords = create_roi(overlay_ll)  # ‡πÉ‡∏ä‡πâ overlay_ll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ROI ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà Front View ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        det_pred, roi_with_boxes = detect_objects_in_roi(roi, model)

        # ----------------- ‡∏ß‡∏≤‡∏î ROI ‡πÅ‡∏•‡∏∞ Bounding Box ‡∏ö‡∏ô Front View -----------------
        front_view_with_roi = show_roi_in_front_view(overlay_ll, roi, roi_coords)  # ‡πÉ‡∏ä‡πâ overlay_ll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ Drivable Area & Lane
        front_view_with_roi = draw_bounding_boxes(front_view_with_roi, det_pred)  # ‡∏ß‡∏≤‡∏î Bounding Box ‡πÉ‡∏ô Front View ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

        # ----------------- ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡πÉ‡∏ô Front View -----------------
        left_lane_pos = get_left_lane_position(ll_seg_mask)
        if left_lane_pos:
            left_lane_x, _ = left_lane_pos
            pixels_per_meter = 50  # ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏à‡∏£‡∏¥‡∏á
            distance_to_lane = compute_distance_to_lane(left_lane_x, pixels_per_meter)
            front_view_with_distance = draw_distance_line(front_view_with_roi, left_lane_x, distance_to_lane, pixels_per_meter)

        # ----------------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• -----------------
        cv2.imshow("Front View - YOLOP", front_view_with_distance)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
        cv2.imshow("Bird's Eye View", bev_image)  # BEV ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà Drivable Area & Lane (‡πÑ‡∏°‡πà‡∏°‡∏µ ROI ‡πÅ‡∏•‡∏∞ Bounding Box)

        # ----------------- ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö -----------------
        object_detected = len(det_pred[0]) > 0 if det_pred else False
        decision = decision_making(object_detected)
        print(f"‚úÖ Detection Results - Drivable Area: {np.sum(da_seg_mask)}, Lanes: {np.sum(ll_seg_mask)}, Objects: {len(det_pred[0]) if det_pred else 0}")
        print(decision)

        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        left_lane_pos = get_left_lane_position(ll_seg_mask)
        if left_lane_pos:
            left_lane_x, _ = left_lane_pos
            pixels_per_meter = 50  # ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏à‡∏£‡∏¥‡∏á
            distance_to_lane = compute_distance_to_lane(left_lane_x, pixels_per_meter)

            print(f" ---> ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: {distance_to_lane:.2f} ‡πÄ‡∏°‡∏ï‡∏£")

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏ñ
            if distance_to_lane > 1.0:
                print(" ---> ‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
                steering_command = -1  # ‡∏´‡∏°‡∏∏‡∏ô‡∏û‡∏ß‡∏á‡∏°‡∏≤‡∏•‡∏±‡∏¢‡∏ã‡πâ‡∏≤‡∏¢
            elif distance_to_lane < 1.0:
                print(" ---> ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏•‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏Ç‡∏¢‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")
                steering_command = 1  # ‡∏´‡∏°‡∏∏‡∏ô‡∏û‡∏ß‡∏á‡∏°‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏ß‡∏≤
            else:
                print(" ---> ‚úÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏≠‡πÄ‡∏Ñ ‚Üí ‡∏ß‡∏¥‡πà‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ")
                steering_command = 0  # ‡∏ï‡∏£‡∏á‡πÑ‡∏õ

                
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô Front View
        cv2.imshow("Front View - YOLOP", front_view_with_distance)
        cv2.imshow("ROI", roi)  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡πÉ‡∏ô Front View ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• BEV
        large_bev = cv2.resize(bev_image, (1280, 720))
        cv2.imshow("Bird's Eye View", large_bev)

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# ----------------- ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á -----------------
zed.close()
cv2.destroyAllWindows()

